@using HealthCare.Core.Data;
@using HealthCare.Core.Models;
@using HealthCare.Core.Models.Users;
@using Microsoft.AspNetCore.Identity;
@inject HealthCare.Core.Data.Context database
@inject AppointmentService appointmentService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IJSRuntime jsRuntime

<div>
    <h3>Dashboard</h3>
    @if (UserAppointments != null && UserAppointments.Any())
    {
        <h4>Your Appointments:</h4>
        <div class="row">
            @foreach (var appointment in UserAppointments)
            {
                bool feedbackExists = database.Feedbacks.FirstOrDefault(f => f.AppointmentID == appointment.Id) != null;
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Appointment ID: @appointment.Id</h5>
                            <p class="card-text">
                                <strong>Doctor Name:</strong> @appointment.PatientName <br />
                                <strong>Start Time:</strong> @appointment.AppointmentStart.ToString("g") <br />
                                <strong>End Time:</strong> @appointment.AppointmentEnd.ToString("g") <br />
                                <strong>Type:</strong> @appointment.AppointmentType <br />
                                <strong>Your notes:</strong> @appointment.Details
                            </p>
                            <button @onclick="() => DeleteAppointment(appointment.Id)" class="btn-primary">Delete</button>
                            @if (!feedbackExists && appointment.AppointmentEnd < DateTime.Now)
                            {
                                <FeedbackComponent appointmentId="@appointment.Id" />
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No appointments found.</p>
    }
</div>


@code {

    private IEnumerable<AppointmentService.AppointmentDetails> UserAppointments;
    private string userName = "";
    public AuthenticationStateProvider AuthenticationStateProviders { get; set; }
    public UserManager<ApplicationUser> UserManagers { get; set; }
    public AppointmentService AppointmentServices;
    public FeedbackService FeedbackServices;

    public DashboardComponent(){}


    // Load data on start
    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();

        base.OnInitialized();
    }

    // Load user appointments
    private async Task LoadAppointments()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = UserManager.GetUserAsync(user).GetAwaiter().GetResult();



        if(currentUser != null)
        {
            UserAppointments = await appointmentService.GetAppointmentsForPatient(currentUser.Id);
        }
    }

    private async void DeleteAppointment(int id)
    {
        // Log a message to the browser console
        var appointmentToDelete = database.Appointments.Where(a => a.Id == id).FirstOrDefault();

        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this appointment?");
        if (confirmed)
        {
            await appointmentService.DeleteAppointment(appointmentToDelete);
            await LoadAppointments();
            StateHasChanged();
        }
    }
}
