@using HealthCare.Core.Data;
@using HealthCare.Core.Models;
@using HealthCare.Core.Models.Users;
@using Microsoft.AspNetCore.Identity;
@inject HealthCare.Core.Data.Context database
@inject AppointmentService appointmentService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IJSRuntime jsRuntime

<div>
    <h3>Dashboard</h3>
    @if (UserAppointments != null && UserAppointments.Any())
    {
        <h4>Your Appointments:</h4>
        <ul>
            @foreach (var appointment in UserAppointments)
            {
                bool feedbackExists = database.Feedbacks.FirstOrDefault(f => f.AppointmentID == appointment.Id) != null;

                <li>Start: @appointment.AppointmentStart.ToString("yyyy-M-dd HH:mm") - @appointment.AppointmentEnd.ToString("yyyy-M-dd HH:mm"): @appointment.PatientText
                    <button @onclick="() => DeleteAppointment(appointment.Id)">Delete</button>

                    @if (!feedbackExists && appointment.AppointmentEnd < DateTime.Now)
                    {
                        <FeedbackComponent appointmentId="@appointment.Id" />
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>No appointments found.</p>
    }
</div>


@code {

    private List<Appointment> UserAppointments { get; set; } = new List<Appointment>();
    public AuthenticationStateProvider AuthenticationStateProviders { get; set; }
    public UserManager<ApplicationUser> UserManagers { get; set; }
    public AppointmentService AppointmentServices;
    public FeedbackService FeedbackServices;

    public DashboardComponent(){}


    // Load data on start
    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();

        base.OnInitialized();
    }

    // Load user appointments
    private async Task LoadAppointments()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = UserManager.GetUserAsync(user).GetAwaiter().GetResult();



        if(currentUser != null)
        {
            UserAppointments = database.Appointments.Where(t => t.PatientId == currentUser.Id).ToList();
        }
    }

    private async void DeleteAppointment(int id)
    {
        // Log a message to the browser console
        var appointmentToDelete = database.Appointments.Where(a => a.Id == id).FirstOrDefault();

        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this appointment?");
        if (confirmed)
        {
            await appointmentService.DeleteAppointment(appointmentToDelete);
            await LoadAppointments();
            StateHasChanged();
        }
    }
}
