@using HealthCare.Core.Data;
@using HealthCare.Core.Models;
@using HealthCare.Core.Models.Users;
@inject BookingService BookingService

@if (!bookingMade)
{
<form @onsubmit="GenerateAvailableTimeSlots">
    <label for="selectedDay">Select Day:</label>
        <input type="date" @bind="selectedDay" />

    <label for="selectedStaff">Select Staff:</label>
    <select id="selectedStaff" name="selectedStaff" @bind="selectedStaff">
            @foreach (var worker in mockDoctors)
            {
                <option value="@worker.UserName">@worker.UserName</option>
            }
    </select>

    <button type="submit">Show Available Appointments</button>
</form>

    @if (availableTimes != null)
    {
        <h3>Available Appointments:</h3>
        <form @onsubmit="@(e => BookAppointment(selectedTime))">
            <ul>
                @foreach (var timeSlot in availableTimes)
                {
                    <li>
                        <label>
                            <input type="radio" name="selectedTime" value="@timeSlot.ToString("yyyy-MM-dd HH:mm:ss")" @onchange="@(e => selectedTime = e.Value.ToString())" />
                            @timeSlot.Hour:00 - @(timeSlot.Hour + 1):00
                        </label>
                    </li>
                }
            </ul>

            <button type="submit">Book Selected Time</button>
        </form>
    }



    
}


@if (bookingMade)
{
    <p>Appointment booked. Thank you for choosing HospiCare.</p>
}

@code {
    private readonly Context database;
    private DateTime selectedDay;
    private string patientName;
    private string selectedService;
    private string selectedStaff;
    private string selectedTime;

    private List<Appointment> appointments = new List<Appointment>
            {
                new Appointment { Id = 1, AppointmentStart = DateTime.Parse("0001-01-01 10:00"), AppointmentEnd = DateTime.Parse("0001-01-01 11:00"), PatientText = "John Doe", ApplicationUserId = "someUserId" },
                new Appointment { Id = 2, AppointmentStart = DateTime.Parse("0001-01-01 14:00"), AppointmentEnd = DateTime.Parse("0001-01-01 15:00"), PatientText = "Jane Doe", ApplicationUserId = "someOtherUserId" },
            };
    private bool bookingMade = false;
    public List<DateTime> availableTimes;
    List<ApplicationUser> mockDoctors = ApplicationUser.GenerateMockDoctors();


    public BookingComponent(){}

    public BookingComponent(Context database)
    {
        this.database = database;


    }

    private void GenerateAvailableTimeSlots()
    {
        var workingHours = Enumerable.Range(8, 10);

        var allTimeSlots = workingHours.Select(hour => new DateTime(selectedDay.Year, selectedDay.Month, selectedDay.Day, hour, 0, 0)).ToList();

        var bookedTimeSlots = appointments
            .Select(appointment => appointment.AppointmentStart)
            .ToList();

        var availableTimeSlots = allTimeSlots
            .Except(bookedTimeSlots)
            .Where(timeSlot => timeSlot.Hour >= 8 && timeSlot.Hour < 18)
            .ToList();

        availableTimes = availableTimeSlots;

    }


    private void BookAppointment(string selectedtime)
    {

        var newBooking = new Appointment
            {
                AppointmentStart = DateTime.Parse(selectedTime),
                AppointmentEnd = DateTime.Parse(selectedTime).AddHours(1),
                PatientText = patientName,
                ApplicationUserId = "41"

        };

        BookingService.AddBooking(newBooking);
        bookingMade = true;
        var bookings = BookingService.GetBookings();
    }
}
