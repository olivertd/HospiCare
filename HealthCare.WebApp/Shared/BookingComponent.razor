@using HealthCare.Core.Data;
@using HealthCare.Core.Models;
@using HealthCare.Core.Models.Users;
@using Microsoft.AspNetCore.Identity;
@inject BookingService BookingService;
@inject HealthCare.Core.Data.Context database
@inject UserManager<ApplicationUser> UserManager



@if (!bookingMade)
{
<form @onsubmit="GenerateAvailableTimeSlots">
    <label for="selectedDay">Select Day:</label>
        <input type="date" @bind="selectedDay" />

    <label for="selectedStaff">Select Staff:</label>
    <select id="selectedStaff" name="selectedStaff" @bind="selectedStaff">
            @foreach (var worker in workers)
            {
                <option value="@worker.Email">@worker.Email</option>
            }
    </select>

    <button type="submit">Show Available Appointments</button>
</form>

    @if (availableTimes != null)
    {
        <h3>Available Appointments:</h3>
        <form @onsubmit="@(e => BookAppointment(selectedTime))">
            <ul>
                @foreach (var timeSlot in availableTimes)
                {
                    <li>
                        <label>
                            <input type="radio" name="selectedTime" value="@timeSlot.ToString("yyyy-MM-dd HH:mm:ss")" @onchange="@(e => selectedTime = e.Value.ToString())" />
                            @timeSlot.Hour:00 - @(timeSlot.Hour + 1):00
                        </label>
                    </li>
                }
            </ul>

            <button type="submit">Book Selected Time</button>
        </form>
    }



    
}


@if (bookingMade)
{
    <p>Appointment booked. Thank you for choosing HospiCare.</p>
}



@code {
    private DateTime selectedDay;
    private string patientName;
    private string selectedService;
    private string selectedStaff;
    private string selectedTime;

    private bool bookingMade = false;
    public List<DateTime> availableTimes;
    public List<ApplicationUser> workers = new List<ApplicationUser>();



    public BookingComponent(){}

    public BookingComponent(Context database, List<Appointment> appointments, List<ApplicationUser> workers)
    {
        this.database = database;
        GetWorkers();
    }

    public async Task GetWorkers()
    {
        var localWorkers = await UserManager.GetUsersInRoleAsync("Doctor");
        this.workers = (List<ApplicationUser>)localWorkers;
    }

    private void GenerateAvailableTimeSlots()
    {
        var workingHours = Enumerable.Range(8, 10);

        var allTimeSlots = workingHours.Select(hour => new DateTime(selectedDay.Year, selectedDay.Month, selectedDay.Day, hour, 0, 0)).ToList();

        var availableTimeSlots = allTimeSlots;


        var bookedTimeSlots = database.Appointments
        .Select(appointment => appointment.AppointmentStart)
        .ToList();

        availableTimeSlots = allTimeSlots
        .Except(bookedTimeSlots)
        .Where(timeSlot => timeSlot.Hour >= 8 && timeSlot.Hour < 18)
        .ToList();







        availableTimes = availableTimeSlots;

    }


    private void BookAppointment(string selectedtime)
    {

        var newBooking = new Appointment
            {
                AppointmentStart = DateTime.Parse(selectedTime),
                AppointmentEnd = DateTime.Parse(selectedTime).AddHours(1),
                PatientText = "Name Nameson",
                ApplicationUserId = "fcfd2443-82c3-49e3-b1c0-fc5883e0ba6a"

        };

        database.Appointments.Add(newBooking);
        database.SaveChanges();
        bookingMade = true;
        var bookings = BookingService.GetBookings();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetWorkers();
        // Other code to render the component
    }
}
