@page "/workersdashboard"
@attribute [Authorize(Roles = "Doctor, Nurse")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppointmentService appointmentService
@using Microsoft.AspNetCore.Identity
@using HealthCare.Core.Models.Users
@inject UserManager<ApplicationUser> UserManager
@inject HealthCare.Core.Data.Context database
@inject IJSRuntime jsRuntime

<h3>Workers Dashboard</h3>

<!-- Worker Info Card -->
<div class="card mb-4">
    <div class="card-header">Worker Information</div>
    <div class="card-body">
        <p class="card-text">
            <strong>Name:</strong> @workerName <br />
            <strong>Role:</strong> @workerRole
        </p>
    </div>
</div>

<!-- Appointments Section -->
@if (workerAppointments == null)
{
    <p>Loading appointments...</p>
}
else if (workerAppointments.Any())
{
    <h4>Upcoming Appointments</h4>
    <div class="row">
        @foreach (var appointment in workerAppointments)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Appointment ID: @appointment.Id</h5>
                        <p class="card-text">
                            <strong>Patient Name:</strong> @appointment.PatientName <br />
                            <strong>Start Time:</strong> @appointment.AppointmentStart.ToString("g") <br />
                            <strong>End Time:</strong> @appointment.AppointmentEnd.ToString("g") <br />
                            <strong>Type:</strong> @appointment.AppointmentType<br />
                            <strong>Patient notes:</strong> @appointment.Details
                        </p>
                        <button @onclick="() => DeleteAppointment(appointment.Id)" class="btn-primary">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No upcoming appointments.</p>
}


@code {
    private IEnumerable<AppointmentService.AppointmentDetails> workerAppointments;
    private string workerName = "";
    private string workerRole = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principalUser = authState.User;
        var userId = principalUser.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            var applicationUser = await UserManager.FindByIdAsync(userId);
            workerName = $"{applicationUser.FirstName} {applicationUser.LastName}";
        }

        workerRole = principalUser.IsInRole("Doctor") ? "Doctor" : "Nurse";

        if (!string.IsNullOrEmpty(userId))
        {
            workerAppointments = await appointmentService.GetAppointmentsForWorker(userId);
        }
    }
    private async void DeleteAppointment(int id)
    {
        // Log a message to the browser console
        var appointmentToDelete = database.Appointments.Where(a => a.Id == id).FirstOrDefault();

        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this appointment?");
        if (confirmed)
        {
            await appointmentService.DeleteAppointment(appointmentToDelete);
            StateHasChanged();
        }
    }
}
